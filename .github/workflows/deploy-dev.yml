name: CD

# main 브랜치에 push가 일어나면 작동하도록 정의한다.
on:
  push:
    branches: [develop]

# Github Action이 작동할 파일을 만든다.
jobs:
  # This workflow contains a single job called "build"
  build:
    name: build and upload to s3
    # Github Action의 작업들이 수행될 가상 OS를 지정한다.
    runs-on: ubuntu-latest

    # 각 작업(jobs)가 수행될 단계를 steps로 정의한다.
    steps:
      # Github Action이 수행될 가상 머신에 접속한다.
      - name: checkout
        uses: actions/checkout@v2

      # AWS에 접속한다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}

      # - name: Install packages
      #   run: yarn install
      
      # - name: build
      #   run: yarn build
        # 아래는 빌드 시 테스트를 수행하므로 환경 변수를 지정해주는 것이다.

      # 빌드된 파일을 S3에 업로드 하기 위해 zip 파일로 압축한다.
      # 여기서는 빌드된 파일, appspec.yml과 Shell Script들이 들어 있는
      # scripts 파일도 함께 압축한다.
      - name: compress files for deploy
        run: zip -r eatsroad-backend.zip ./*

      # 압축한 zip파일을 S3에 업로드한다.
      - name: upload to s3
        run: aws s3 cp eatsroad-backend.zip s3://${{ secrets.AWS_S3_BUCKET }}

  # 이 아래부터는 배포 작업인데, CodeDeploy가 수행할 작업들을 정의한다.
  deploy:
    needs: build
    name: deploy to ec2
    runs-on: ubuntu-latest

    steps:
      # AWS에 로그인한다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}
      # 배포를 수행한다. run 에 수행할 작업들을 정의한다.
      - name: deploy
        run: aws deploy create-deployment --application-name EatsRoadApplication --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name EatsRoadDeployGroup --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},bundleType=zip,key=eatsroad-backend.zip --region ${{ secrets.AWS_S3_REGION }} --file-exists-behavior OVERWRITE
